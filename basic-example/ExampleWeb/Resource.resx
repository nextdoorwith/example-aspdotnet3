<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ModelBinding_AttemptedValueIsInvalid" xml:space="preserve">
    <value>{1}では'{0}'は無効な値です。</value>
    <comment>The value '{0}' is not valid for {1}.</comment>
  </data>
  <data name="ModelBinding_MissingBindRequiredValue" xml:space="preserve">
    <value>{0}に対する値が指定されていません。</value>
    <comment>A value for the '{0}' parameter or property was not provided.</comment>
  </data>
  <data name="ModelBinding_MissingKeyOrValue" xml:space="preserve">
    <value>必須です。</value>
    <comment>A value is required.</comment>
  </data>
  <data name="ModelBinding_MissingRequestBodyRequiredValue" xml:space="preserve">
    <value>要求にボディの指定が必須です。</value>
    <comment>A non-empty request body is required.</comment>
  </data>
  <data name="ModelBinding_NonPropertyAttemptedValueIsInvalid" xml:space="preserve">
    <value>'{0}'は無効です。</value>
    <comment>The value '{0}' is not valid.</comment>
  </data>
  <data name="ModelBinding_NonPropertyUnknownValueIsInvalid" xml:space="preserve">
    <value>値は無効です。</value>
    <comment>The supplied value is invalid.</comment>
  </data>
  <data name="ModelBinding_NonPropertyValueMustBeANumber" xml:space="preserve">
    <value>数字を指定してください。</value>
    <comment>The field must be a number.</comment>
  </data>
  <data name="ModelBinding_UnknownValueIsInvalid" xml:space="preserve">
    <value>{0}の値は無効です。</value>
    <comment>The supplied value is invalid for {0}.</comment>
  </data>
  <data name="ModelBinding_ValueIsInvalid" xml:space="preserve">
    <value>'{0}'は無効です。</value>
    <comment>The value '{0}' is invalid.</comment>
  </data>
  <data name="ModelBinding_ValueMustBeANumber" xml:space="preserve">
    <value>{0}は数字を指定してください。</value>
    <comment>The field {0} must be a number.</comment>
  </data>
  <data name="ModelBinding_ValueMustNotBeNull" xml:space="preserve">
    <value>'{0}'は無効です。</value>
    <comment>The value '{0}' is invalid.</comment>
  </data>
  <data name="Validator_CompareAttribute" xml:space="preserve">
    <value>{0}と{1}が一致しません。</value>
    <comment>'{0}' and '{1}' do not match.</comment>
  </data>
  <data name="Validator_CreditCardAttribute" xml:space="preserve">
    <value>{0}は有効なカード番号ではありません。</value>
    <comment>The {0} field is not a valid credit card number.</comment>
  </data>
  <data name="Validator_EmailAddressAttribute" xml:space="preserve">
    <value>{0}は有効なメールアドレスではありません。</value>
    <comment>The {0} field is not a valid e-mail address.</comment>
  </data>
  <data name="Validator_PhoneAttribute" xml:space="preserve">
    <value>{0}は有効な電話番号ではありません。</value>
    <comment>The {0} field is not a valid phone number.</comment>
  </data>
  <data name="Validator_RangeAttribute" xml:space="preserve">
    <value>{0}は{1}から{2}の範囲で指定してください。</value>
    <comment>The field {0} must be between {1} and {2}.</comment>
  </data>
  <data name="Validator_RegularExpressionAttribute" xml:space="preserve">
    <value>{0}は正規表現'{1}'に一致するように指定してください。</value>
    <comment>The field {0} must match the regular expression '{1}'.</comment>
  </data>
  <data name="Validator_RequiredAttribute" xml:space="preserve">
    <value>{0}は必須です。</value>
    <comment>The {0} field is required.</comment>
  </data>
  <data name="Validator_StringLengthAttribute" xml:space="preserve">
    <value>{0}は{1}桁以内で指定してください。</value>
    <comment>The field {0} must be a string with a maximum length of {1}.</comment>
  </data>
  <data name="Validator_UrlAttribute" xml:space="preserve">
    <value>{0}は有効なURLではありません。</value>
    <comment>The {0} field is not a valid fully-qualified http, https, or ftp URL.</comment>
  </data>
</root>